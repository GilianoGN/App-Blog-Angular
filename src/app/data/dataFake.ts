export const fakeData = [
    {
        id: 0,
        ativo: true,
        photo: 'https://kbase.com.br/novo/wp-content/uploads/2020/09/BANNER-BLOG-5.png',
        title: 'Introdução ao Spring Boot: O que você precisa saber para começar',
        resume: 'O Spring Boot emergiu como uma ferramenta revolucionária no desenvolvimento Java, simplificando drasticamente a criação de aplicações Spring. . .',
        description: 'O Spring Boot simplifica o desenvolvimento de aplicações Spring, eliminando a complexidade da configuração XML e a necessidade de muita boilerplate. Ele foca na "convenção sobre configuração", o que significa que muitos aspectos da sua aplicação já vêm pré-configurados com padrões inteligentes, permitindo que você comece a codificar sua lógica de negócio rapidamente. Isso é especialmente útil para a criação de microserviços e APIs RESTful, onde a agilidade é crucial.\n Uma das principais características do Spring Boot é a sua capacidade de criar aplicações "stand-alone" (autônomas), que podem ser executadas diretamente a partir de um arquivo JAR com um servidor embutido (como Tomcat, Jetty ou Undertow). Isso elimina a necessidade de deployar sua aplicação em um servidor de aplicações externo, simplificando o processo de empacotamento e distribuição.\n Outro ponto forte são os "Starters", que são conjuntos de dependências pré-configuradas para diferentes cenários de desenvolvimento (como spring-boot-starter-web para aplicações web, spring-boot-starter-data-jpa para persistência de dados, etc.). Eles garantem que você tenha todas as dependências necessárias para um determinado tipo de projeto, minimizando conflitos de versão e a necessidade de gerenciar dependências manualmente.\n Além disso, o Spring Boot oferece o Spring Boot Actuator, que fornece endpoints prontos para monitorar e gerenciar sua aplicação em produção. Com ele, você pode verificar o status da aplicação, métricas de desempenho, informações de saúde, entre outros dados importantes, facilitando a observação e o troubleshooting. Essas funcionalidades tornam o Spring Boot uma escolha robusta para projetos de todos os tamanhos.',
        date: '15 de janeiro de 2024',
        author: 'Equipe Baeldung',
    },
    {
        id: 1,
        ativo: false,
        photo: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTsbLFJtLfFdsGPh9I67PRZJnFL2pBSgZkVdg&s',
        title: 'Componentes Angular: A Espinha Dorsal das Aplicações Modernas',
        resume: 'No coração de toda aplicação Angular estão os componentes, blocos de construção reutilizáveis que encapsulam a lógica, o template e o estilo de uma parte da interface do usuário. . .',
        description: 'Componentes são a base de qualquer aplicação Angular, responsáveis por controlar uma parte da tela. Cada componente é uma classe TypeScript decorada com @Component(), que inclui metadados como o seletor (tag HTML para o componente), o template (HTML que define a visão) e o estilo (CSS específico para o componente). Essa modularidade permite que os desenvolvedores criem interfaces de usuário complexas, dividindo-as em partes menores e gerenciáveis, facilitando a manutenção e a reutilização de código.\n A comunicação entre componentes é um aspecto crucial. Componentes pai podem passar dados para componentes filho usando Input Properties (decoradas com @Input()), enquanto componentes filho podem emitir eventos para seus pais usando Output Properties (decoradas com @Output()) e EventEmitter. Essa comunicação hierárquica garante um fluxo de dados claro e previsível, fundamental para a estabilidade e rastreabilidade do estado da aplicação.\n O ciclo de vida de um componente Angular é uma sequência de eventos que ocorrem desde sua criação até sua destruição. Ganchos de ciclo de vida, como ngOnInit, ngOnChanges, ngDoCheck, ngAfterViewInit e ngOnDestroy, permitem que os desenvolvedores executem lógica em momentos específicos do ciclo de vida do componente. Por exemplo, ngOnInit é comumente usado para inicializar dados ou chamar serviços após a criação do componente.\n Compreender esses conceitos é vital para construir aplicações Angular robustas. A capacidade de encapsular funcionalidades, comunicar dados de forma eficaz e gerenciar o ciclo de vida dos componentes permite a criação de interfaces de usuário ricas e reativas. A arquitetura baseada em componentes promove a modularidade, o que facilita o desenvolvimento colaborativo e a escalabilidade do projeto.',
        date: '10 de fevereiro de 2024',
        author: 'Angular Team',
    },
    {
        id: 2,
        ativo: false,
        photo: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR9oRmhc9zBfsCMjcdCq_jSY_M3aHKgPruDFA&s',
        title: 'Spring Security: Protegendo Aplicações Web com Autenticação e Autorização',
        resume: 'A segurança é uma preocupação primordial em qualquer aplicação web moderna. O Spring Security é um framework poderoso e altamente configurável que fornece recursos robustos de autenticação e autorização para aplicações baseadas em Spring. . .',
        description: 'Spring Security é a solução de fato para adicionar segurança a aplicações Spring, oferecendo funcionalidades de autenticação (verificar quem é o usuário) e autorização (o que o usuário pode fazer). Sua abordagem modular e extensível permite adaptar a segurança a diversos cenários, desde aplicações web tradicionais com formulários de login até APIs RESTful com tokens JWT. A flexibilidade do framework é um dos seus maiores trunfos, permitindo que os desenvolvedores personalizem quase todos os aspectos do comportamento da segurança.\n A configuração básica do Spring Security envolve a criação de uma classe de configuração que estende WebSecurityConfigurerAdapter (ou, em versões mais recentes, o uso de SecurityFilterChain). Nela, você pode definir regras de autorização para URLs específicas, configurar provedores de autenticação (como banco de dados, LDAP ou OAuth2) e personalizar o comportamento de login e logout. A granularidade das regras de segurança permite controlar o acesso a recursos específicos com precisão.\n Além da autenticação e autorização, o Spring Security também fornece proteção contra vulnerabilidades comuns da web, como CSRF (Cross-Site Request Forgery), ataques de força bruta e sequestro de sessão. Ele integra-se perfeitamente com outras partes do ecossistema Spring, facilitando a implementação de segurança em aplicações Spring Boot, Spring MVC e Spring Data.\n A capacidade de integrar-se com diferentes provedores de autenticação e suportar diversos mecanismos de segurança, como tokens JWT para APIs sem estado, faz do Spring Security uma ferramenta indispensável para proteger suas aplicações. Ele oferece uma base sólida para construir sistemas seguros, garantindo que apenas usuários autorizados tenham acesso aos recursos apropriados.',
        date: '01 de março de 2024',
        author: 'Chad Darby',
    },
    {
        id: 3,
        ativo: false,
        photo: 'https://meuuniversonerd.com.br/images/noticias-conteudo/cat-tecnologia/desenvolvimento/linguagem-de-computacao-programacao/java/spring/introducao-microservicos-spring-cloud.jpg',
        title: 'Microserviços com Spring Boot e Spring Cloud: Construindo Aplicações Distribuídas',
        resume: 'A arquitetura de microserviços tornou-se um padrão popular para a construção de aplicações escaláveis e resilientes. O Spring Boot, combinado com o ecossistema Spring Cloud. . .',
        description: 'A arquitetura de microserviços envolve a construção de uma aplicação como uma coleção de serviços pequenos e independentes, cada um executando seu próprio processo e comunicando-se através de APIs bem definidas. Essa abordagem contrasta com as arquiteturas monolíticas e oferece benefícios como escalabilidade independente, maior resiliência e flexibilidade na escolha de tecnologias. O Spring Boot é uma excelente base para construir microserviços devido à sua facilidade de configuração e empacotamento.\n Para lidar com os desafios inerentes a sistemas distribuídos, como descoberta de serviços, balanceamento de carga, roteamento de API e gerenciamento de falhas, o Spring Cloud oferece um conjunto de projetos que complementam o Spring Boot. Componentes como o Eureka (para descoberta de serviços), o Ribbon (para balanceamento de carga client-side) e o Zuul/Gateway (para roteamento de API e filtros) simplificam a construção de uma infraestrutura robusta para microserviços.\n O gerenciamento de configurações em um ambiente de microserviços pode ser complexo. O Spring Cloud Config Server permite centralizar o gerenciamento de configurações para todos os seus microserviços, permitindo que as configurações sejam atualizadas dinamicamente sem a necessidade de redeployar os serviços. Isso é crucial para ambientes de produção onde as configurações podem mudar frequentemente.\n Além disso, o Spring Cloud oferece ferramentas para resiliência e tolerância a falhas, como o Hystrix (para disjuntores e fallback) e o Resilience4j (uma alternativa mais moderna). Esses padrões ajudam a isolar falhas entre serviços, garantindo que a falha de um serviço não derrube toda a aplicação. A combinação do Spring Boot com o Spring Cloud oferece um framework completo para construir e operar aplicações distribuídas em escala.',
        date: '10 de abril de 2024',
        author: 'Equipe Red Hat',
    },
    {
        id: 4,
        ativo: false,
        photo: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRtxhOVhxNMUO5lXw1P9lpaI8kTBUAMEDfujw&s',
        title: 'Angular CLI: A Ferramenta Essencial para Produtividade no Desenvolvimento',
        resume: 'O Angular CLI (Command Line Interface) é uma ferramenta poderosa que simplifica significativamente o desenvolvimento de aplicações Angular. . .',
        description: 'O Angular CLI é uma ferramenta de linha de comando que agiliza o desenvolvimento de aplicações Angular, fornecendo comandos para criar projetos, gerar componentes, serviços, módulos e muito mais. Ao invés de criar arquivos manualmente, o CLI faz isso por você, seguindo as melhores práticas e padrões de projeto Angular. Isso garante a consistência do código em toda a equipe de desenvolvimento e acelera a fase inicial de configuração do projeto.\n Comandos como ng new para criar um novo projeto, ng generate component para gerar um novo componente ou ng serve para iniciar um servidor de desenvolvimento local são apenas a ponta do iceberg. O CLI também suporta a geração de testes unitários, testes de integração e até mesmo a criação de bibliotecas reutilizáveis dentro de um monorepo. Essa automação reduz significativamente o tempo gasto em tarefas repetitivas.\n Além da geração de código, o Angular CLI oferece recursos para otimização de build. O comando ng build compila sua aplicação para produção, realizando otimizações como tree-shaking (remoção de código não utilizado), minificação e uglificação, resultando em bundles menores e mais rápidos para o navegador. Isso é crucial para o desempenho de aplicações web e para a experiência do usuário final.\n O CLI também integra ferramentas como Karma para testes unitários e Protractor para testes end-to-end, facilitando a implementação de uma estratégia de testes robusta. Com a evolução contínua do Angular, o CLI também é atualizado para suportar as últimas funcionalidades e melhorias, garantindo que os desenvolvedores tenham acesso às ferramentas mais modernas para construir aplicações de alta qualidade.',
        date: '20 de março de 2024',
        author: 'John Papa',
    },
    {
        id: 5,
        ativo: false,
        photo: 'https://media.licdn.com/dms/image/v2/D4E12AQE_cWLJvIMBcw/article-cover_image-shrink_720_1280/article-cover_image-shrink_720_1280/0/1725359718289?e=2147483647&v=beta&t=OQgDQxfPfAjyTRrZmN9yxmXSouvK-GXa-KOZLrdx0PY',
//        photo: 'https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/Placeholder_view_vector.svg/681px-Placeholder_view_vector.svg.png',
        title: 'Java e a Máquina Virtual (JVM): O Coração da Portabilidade',
        resume: 'A Máquina Virtual Java (JVM) é o componente fundamental que permite que o código Java seja executado em qualquer plataforma...',
        description: 'A JVM é um ambiente de tempo de execução que atua como uma camada de abstração entre o código Java compilado (bytecode) e o hardware e sistema operacional específicos. Quando você compila um programa Java, o compilador javac transforma o código-fonte em bytecode. Este bytecode não é específico de uma máquina, mas sim um formato intermediário que a JVM pode interpretar e executar. É essa capacidade de intermediar que garante a portabilidade do Java.\n O funcionamento da JVM envolve várias etapas. Primeiramente, o Class Loader é responsável por carregar as classes Java no ambiente de execução. Em seguida, o Bytecode Verifier garante a segurança e a integridade do código, verificando se ele segue as regras de segurança da JVM. Após a verificação, o Interpretador ou o Just-In-Time (JIT) Compiler entram em ação para converter o bytecode em código de máquina nativo. O JIT Compiler é crucial para o desempenho, pois ele compila partes do código frequentemente executadas em código nativo, otimizando a performance.\n Além de executar o código, a JVM também gerencia a memória da aplicação através do Garbage Collector. O Garbage Collector identifica e libera automaticamente objetos que não estão mais sendo utilizados, evitando vazamentos de memória e simplificando o gerenciamento de recursos para os desenvolvedores. Essa automação reduz a complexidade e a chance de erros relacionados à memória.\n Os benefícios da JVM são múltiplos. A portabilidade é o mais evidente, permitindo que o mesmo código seja executado em diferentes sistemas operacionais e dispositivos. A segurança é reforçada pelo bytecode verifier e pelo ambiente em sandbox. O gerenciamento automático de memória simplifica o desenvolvimento. E a otimização de desempenho via JIT Compiler garante que as aplicações Java sejam eficientes. A JVM é, de fato, o que torna o Java uma linguagem tão versátil e poderosa para uma vasta gama de aplicações.',
        date: '15 de maio de 2024',
        author: 'Oracle',
    }
]